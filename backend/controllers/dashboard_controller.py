from data.db import get_db_connection
from data.repositories import (GeneratedTextRepository, ScenarioRepository,
                               UserRepository)
from flask import Blueprint, jsonify, request
from flask_jwt_extended import get_jwt_identity, jwt_required

dashboard_bp = Blueprint('dashboard', __name__)

@dashboard_bp.route('/api/dashboard/stats', methods=['GET'])
@jwt_required()
def get_dashboard_stats():
    """Get aggregate statistics for the authenticated user"""
    username = get_jwt_identity()
    user = UserRepository.get_user_by_username(username)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    user_id = user['id']
    conn = get_db_connection()
    
    try:
        # Count scenarios created by user
        scenarios_count = conn.execute(
            'SELECT COUNT(*) as count FROM scenarios WHERE user_id = ? AND is_deleted = 0',
            (user_id,)
        ).fetchone()['count']
        
        # Count stories generated by user
        stories_count = conn.execute(
            '''SELECT COUNT(*) as count FROM stories s 
               JOIN scenarios sc ON s.scenario_id = sc.id 
               WHERE sc.user_id = ? AND sc.is_deleted = 0''',
            (user_id,)
        ).fetchone()['count']
        
        # Get last activity (most recent created_at from scenarios or stories)
        last_activity = conn.execute(
            '''SELECT MAX(created_at) as last_activity FROM (
                 SELECT created_at FROM scenarios WHERE user_id = ? AND is_deleted = 0
                 UNION ALL
                 SELECT s.created_at FROM stories s 
                 JOIN scenarios sc ON s.scenario_id = sc.id 
                 WHERE sc.user_id = ? AND sc.is_deleted = 0
               ) activities''',
            (user_id, user_id)
        ).fetchone()['last_activity']
        
        return jsonify({
            'scenariosCreated': scenarios_count,
            'storiesGenerated': stories_count,
            'storiesPublished': 0,    # placeholder for future feature
            'scenariosPublished': 0,  # placeholder for future feature
            'modelsUsed': 0,          # placeholder until AI model tracking implemented
            'lastActivity': last_activity
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()

@dashboard_bp.route('/api/dashboard/recent-scenarios', methods=['GET'])
@jwt_required()
def get_recent_scenarios():
    """Get user's most recently created/modified scenarios with pagination"""
    username = get_jwt_identity()
    user = UserRepository.get_user_by_username(username)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    user_id = user['id']
    
    # Parse query parameters
    limit = request.args.get('limit', 5, type=int)
    offset = request.args.get('offset', 0, type=int)
    
    # Validate limits
    limit = min(max(1, limit), 50)  # Between 1 and 50
    offset = max(0, offset)
    
    conn = get_db_connection()
    
    try:
        # Get paginated recent scenarios with story counts and total count
        scenarios_data = conn.execute(
            '''SELECT s.id, s.title, s.created_at, s.updated_at, s.jsondata,
                      COUNT(st.id) as story_count,
                      COUNT(*) OVER() as total_count
               FROM scenarios s
               LEFT JOIN stories st ON s.id = st.scenario_id
               WHERE s.user_id = ? AND s.is_deleted = 0
               GROUP BY s.id, s.title, s.created_at, s.updated_at, s.jsondata
               ORDER BY s.updated_at DESC
               LIMIT ? OFFSET ?''',
            (user_id, limit, offset)
        ).fetchall()
        
        # Format response
        scenarios = []
        total_count = 0
        
        for row in scenarios_data:
            total_count = row['total_count'] if 'total_count' in row and row['total_count'] else 0
            scenarios.append({
                'id': row['id'],
                'title': row['title'] or 'Untitled Scenario',
                'created': row['created_at'],
                'generatedStoryCount': row['story_count'],
                'lastModified': row['updated_at'] or row['created_at']  # Use updated_at if available, fallback to created_at
            })
        
        # Calculate pagination info
        has_more = (offset + limit) < total_count
        
        return jsonify({
            'scenarios': scenarios,
            'pagination': {
                'total': total_count,
                'limit': limit,
                'offset': offset,
                'hasMore': has_more
            }
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()

@dashboard_bp.route('/api/dashboard/recent-stories', methods=['GET'])
@jwt_required()
def get_recent_stories():
    """Get user's most recently generated stories with pagination"""
    username = get_jwt_identity()
    user = UserRepository.get_user_by_username(username)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    user_id = user['id']
    
    # Parse query parameters
    limit = request.args.get('limit', 5, type=int)
    offset = request.args.get('offset', 0, type=int)
    
    # Validate limits
    limit = min(max(1, limit), 50)  # Between 1 and 50
    offset = max(0, offset)
    
    conn = get_db_connection()
    
    try:
        # Get paginated recent stories with scenario details and total count
        stories_data = conn.execute(
            '''SELECT st.id, st.scenario_id, st.text, st.created_at,
                      s.title as scenario_title,
                      LENGTH(st.text) as word_count,
                      SUBSTR(st.text, 1, 100) as preview,
                      COUNT(*) OVER() as total_count
               FROM stories st
               JOIN scenarios s ON st.scenario_id = s.id
               WHERE s.user_id = ? AND s.is_deleted = 0
               ORDER BY st.created_at DESC
               LIMIT ? OFFSET ?''',
            (user_id, limit, offset)
        ).fetchall()
        
        # Format response
        stories = []
        total_count = 0
        
        for row in stories_data:
            total_count = row['total_count'] if 'total_count' in row and row['total_count'] else 0
            
            # Clean up preview text - remove extra whitespace and add ellipsis if truncated
            preview = row['preview'].strip() if row['preview'] else ''
            if len(row['text']) > 100:
                preview += '...'
            
            stories.append({
                'id': row['id'],
                'scenarioId': row['scenario_id'],
                'scenarioTitle': row['scenario_title'] or 'Untitled Scenario',
                'created': row['created_at'],
                'wordCount': row['word_count'] or 0,
                'preview': preview
            })
        
        # Calculate pagination info
        has_more = (offset + limit) < total_count
        
        return jsonify({
            'stories': stories,
            'pagination': {
                'total': total_count,
                'limit': limit,
                'offset': offset,
                'hasMore': has_more
            }
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()

@dashboard_bp.route('/api/dashboard/last-activity', methods=['GET'])
@jwt_required()
def get_last_activity():
    """Get user's most recent activity timestamp"""
    username = get_jwt_identity()
    user = UserRepository.get_user_by_username(username)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    user_id = user['id']
    conn = get_db_connection()
    
    try:
        # Get the most recent activity with details
        activity = conn.execute(
            '''SELECT activity_type, created_at, description FROM (
                 SELECT 'scenario_created' as activity_type, created_at, 
                        'Created scenario "' || COALESCE(title, 'Untitled') || '"' as description
                 FROM scenarios 
                 WHERE user_id = ? AND is_deleted = 0
                 UNION ALL
                 SELECT 'story_generated' as activity_type, s.created_at,
                        'Generated story for "' || COALESCE(sc.title, 'Untitled') || '"' as description
                 FROM stories s 
                 JOIN scenarios sc ON s.scenario_id = sc.id 
                 WHERE sc.user_id = ? AND sc.is_deleted = 0
               ) activities
               ORDER BY created_at DESC
               LIMIT 1''',
            (user_id, user_id)
        ).fetchone()
        
        if not activity:
            return jsonify({
                'lastActivity': None,
                'activityType': None,
                'description': 'No activity found'
            })
        
        return jsonify({
            'lastActivity': activity['created_at'],
            'activityType': activity['activity_type'],
            'description': activity['description']
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()
