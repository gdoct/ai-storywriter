import json
from fastapi import APIRouter, HTTPException, status, Depends, Query
from models.dashboard import (
    DashboardStats, RecentScenariosResponse, RecentStoriesResponse, 
    LastActivity, RecentScenario, RecentStory, PaginationInfo
)
from data.db import get_db_connection
from data.repositories import UserRepository
from middleware.fastapi_auth import get_current_user

router = APIRouter()

@router.get("/dashboard/stats", response_model=DashboardStats)
async def get_dashboard_stats(current_user: dict = Depends(get_current_user)):
    """Get aggregate statistics for the authenticated user"""
    user_id = current_user['id']
    conn = get_db_connection()
    
    try:
        # Count scenarios created by user
        scenarios_count = conn.execute(
            'SELECT COUNT(*) as count FROM scenarios WHERE user_id = ? AND is_deleted = 0',
            (user_id,)
        ).fetchone()['count']
        
        # Count stories generated by user
        stories_count = conn.execute(
            '''SELECT COUNT(*) as count FROM stories s 
               JOIN scenarios sc ON s.scenario_id = sc.id 
               WHERE sc.user_id = ? AND sc.is_deleted = 0''',
            (user_id,)
        ).fetchone()['count']
        
        # Count stories published by user
        published_stories_count = conn.execute(
            '''SELECT COUNT(*) as count FROM market_stories ms
               WHERE ms.user_id = ?''',
            (user_id,)
        ).fetchone()['count']
        
        # Get last activity (most recent created_at from scenarios or stories)
        last_activity = conn.execute(
            '''SELECT MAX(created_at) as last_activity FROM (
                 SELECT created_at FROM scenarios WHERE user_id = ? AND is_deleted = 0
                 UNION ALL
                 SELECT s.created_at FROM stories s 
                 JOIN scenarios sc ON s.scenario_id = sc.id 
                 WHERE sc.user_id = ? AND sc.is_deleted = 0
               ) activities''',
            (user_id, user_id)
        ).fetchone()['last_activity']
        
        return DashboardStats(
            scenariosCreated=scenarios_count,
            storiesGenerated=stories_count,
            storiesPublished=published_stories_count,
            scenariosPublished=0,  # placeholder for future feature
            modelsUsed=0,          # placeholder until AI model tracking implemented
            lastActivity=last_activity
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
    finally:
        conn.close()

@router.get("/dashboard/recent-scenarios", response_model=RecentScenariosResponse)
async def get_recent_scenarios(
    current_user: dict = Depends(get_current_user),
    limit: int = Query(default=5, ge=1, le=50),
    offset: int = Query(default=0, ge=0)
):
    """Get user's most recently created/modified scenarios with pagination"""
    user_id = current_user['id']
    conn = get_db_connection()
    
    try:
        # Get paginated recent scenarios with story counts and total count
        scenarios_data = conn.execute(
            '''SELECT s.id, s.title, s.created_at, s.updated_at, s.jsondata,
                      COUNT(st.id) as story_count,
                      COUNT(*) OVER() as total_count
               FROM scenarios s
               LEFT JOIN stories st ON s.id = st.scenario_id
               WHERE s.user_id = ? AND s.is_deleted = 0
               GROUP BY s.id, s.title, s.created_at, s.updated_at, s.jsondata
               ORDER BY s.updated_at DESC
               LIMIT ? OFFSET ?''',
            (user_id, limit, offset)
        ).fetchall()
        
        # Format response
        scenarios = []
        total_count = 0
        for row in scenarios_data:
            total_count = row['total_count'] if 'total_count' in row and row['total_count'] else 0
            jsondata = json.loads(row['jsondata']) if row['jsondata'] else {}
            scenarios.append(RecentScenario(
                id=row['id'],
                title=row['title'] or 'Untitled Scenario',
                created=row['created_at'],
                generatedStoryCount=row['story_count'],
                lastModified=row['updated_at'] or row['created_at'],
                imageUrl=jsondata.get('imageUrl') if jsondata else None,
                synopsis=jsondata.get('synopsis') if jsondata else None,
                characters=jsondata.get('characters') if jsondata else None
            ))

        # Calculate pagination info
        has_more = (offset + limit) < total_count
        
        return RecentScenariosResponse(
            scenarios=scenarios,
            pagination=PaginationInfo(
                total=total_count,
                limit=limit,
                offset=offset,
                hasMore=has_more
            )
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
    finally:
        conn.close()

@router.get("/dashboard/recent-stories", response_model=RecentStoriesResponse)
async def get_recent_stories(
    current_user: dict = Depends(get_current_user),
    limit: int = Query(default=5, ge=1, le=50),
    offset: int = Query(default=0, ge=0)
):
    """Get user's most recently generated stories with pagination"""
    user_id = current_user['id']
    conn = get_db_connection()
    
    try:
        # Get paginated recent stories with scenario details and total count
        stories_data = conn.execute(
            '''SELECT st.id, st.scenario_id, st.text, st.created_at,
                      LENGTH(st.text) as word_count,
                      SUBSTR(st.text, 1, 100) as preview,
                      COUNT(*) OVER() as total_count,
                      CASE WHEN ms.id IS NOT NULL THEN 1 ELSE 0 END as is_published,
                      st.scenario_json as scenario_json
               FROM stories st
               JOIN scenarios s ON st.scenario_id = s.id
               LEFT JOIN market_stories ms ON st.id = ms.original_story_id
               WHERE s.user_id = ? AND s.is_deleted = 0
               ORDER BY st.created_at DESC
               LIMIT ? OFFSET ?''',
            (user_id, limit, offset)
        ).fetchall()
        
        # Format response
        stories = []
        total_count = 0
        
        for row in stories_data:
            total_count = row['total_count'] if 'total_count' in row and row['total_count'] else 0
            
            # Clean up preview text - remove extra whitespace and add ellipsis if truncated
            preview = row['preview'].strip() if row['preview'] else ''
            if len(row['text']) > 100:
                preview += '...'
            jsondata = json.loads(row['scenario_json']) if row['scenario_json'] else {}
            scenario_title = jsondata.get('title', 'Untitled Scenario') if jsondata else 'Untitled Scenario'
            
            stories.append(RecentStory(
                id=row['id'],
                scenarioId=row['scenario_id'],
                scenarioTitle=scenario_title,
                created=row['created_at'],
                wordCount=row['word_count'] or 0,
                preview=preview,
                isPublished=bool(row['is_published']),
                imageUrl=jsondata.get('imageUrl') if jsondata else None
            ))
        
        # Calculate pagination info
        has_more = (offset + limit) < total_count
        
        return RecentStoriesResponse(
            stories=stories,
            pagination=PaginationInfo(
                total=total_count,
                limit=limit,
                offset=offset,
                hasMore=has_more
            )
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
    finally:
        conn.close()

@router.get("/dashboard/last-activity", response_model=LastActivity)
async def get_last_activity(current_user: dict = Depends(get_current_user)):
    """Get user's most recent activity timestamp"""
    user_id = current_user['id']
    conn = get_db_connection()
    
    try:
        # Get the most recent activity with details
        activity = conn.execute(
            '''SELECT activity_type, created_at, description FROM (
                 SELECT 'scenario_created' as activity_type, created_at, 
                        'Created scenario "' || COALESCE(title, 'Untitled') || '"' as description
                 FROM scenarios 
                 WHERE user_id = ? AND is_deleted = 0
                 UNION ALL
                 SELECT 'story_generated' as activity_type, s.created_at,
                        'Generated story for "' || COALESCE(sc.title, 'Untitled') || '"' as description
                 FROM stories s 
                 JOIN scenarios sc ON s.scenario_id = sc.id 
                 WHERE sc.user_id = ? AND sc.is_deleted = 0
               ) activities
               ORDER BY created_at DESC
               LIMIT 1''',
            (user_id, user_id)
        ).fetchone()
        
        if not activity:
            return LastActivity(
                lastActivity=None,
                activityType=None,
                description='No activity found'
            )
        
        return LastActivity(
            lastActivity=activity['created_at'],
            activityType=activity['activity_type'],
            description=activity['description']
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
    finally:
        conn.close()